generator client {
  provider      = "prisma-client-js"
  // binaryTargets = ["native", "darwin", "rhel-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String? @default("member")
  username      String? 
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  saves         Save[]
  // votes         Like[]
  pockets       Pocket[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Language {
  id          String @id @default(cuid())
  name        String @unique
  posts       Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pocket {
  id    String @id @default(cuid())
  name  String 
  orderIndex Int? @default(0)
  userId  String 
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts   Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Snippets and Resources (posts) - comments - saves
model Post {
  id        String @id @default(cuid())
  title     String
  content   String
  type      String
  note      String?
  link      String?
  linkType  String?
  topic     String?
  userId    String
  languageName String
  pocketId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  language Language?  @relation(fields: [languageName], references: [name])
  comments Comment[]
  saves    Save[]
  pocket    Pocket? @relation(fields: [pocketId], references: [id])
}

model Comment {
  id       String  @id @default(cuid())
  content  String
  postId   String
  userId   String
  parentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Comment?  @relation("Comments", fields: [parentId], references: [id], onDelete: Cascade)
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  children Comment[] @relation("Comments")
}

model Save {
  id          String @id @default(cuid())
  postId      String 
  userId      String 

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id          String @id @default(cuid())
  likedTime   DateTime

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Rating {
  id        String @id @default(cuid())
  stars     Int 
  note      String?
  createdAt DateTime @default(now())
}